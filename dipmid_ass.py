# -*- coding: utf-8 -*-
"""DIPMID-ASS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ecz0dt8kO1yKFp7svyMotjuHpPKZmQ9T
"""

import numpy as np
import cv2
from skimage import io
import matplotlib.pyplot as plt

image = io.imread('https://images.unsplash.com/photo-1683009427479-c7e36bbb7bca?auto=format&fit=crop&q=80&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&w=2070')

plt.imshow(image)

plt.show()

resized_image = cv2.resize(image, (1000, 800))

plt.imshow(resized_image)

plt.show()


x1, y1 = 150, 250
x2, y2 = 600, 650
cropped_image = image[y1:y2, x1:x2]
plt.imshow(cropped_image)
plt.show()

border_width = 10
border_color = (0, 255, 0)
bordered_image = cv2.copyMakeBorder(image, border_width, border_width, border_width, border_width, cv2.BORDER_CONSTANT, value=border_color)
plt.imshow(bordered_image)
plt.show()

from google.colab import drive
drive.mount('/content/drive')

import cv2
import os
import matplotlib.pyplot as plt


folder_path = '/content/drive/MyDrive/Varcity/era'

image_files = [f for f in os.listdir(folder_path) if f.endswith(('.jpg', '.jpeg', '.png', '.bmp'))]


for image_file in image_files:

    image_path = os.path.join(folder_path, image_file)


    image = cv2.imread(image_path)

    if image is not None:
        resized_image = cv2.resize(image, (400, 350))
        border_width = 5
        border_color = (255, 200, 0)
        bordered_image = cv2.copyMakeBorder(resized_image, border_width, border_width, border_width, border_width, cv2.BORDER_CONSTANT, value=border_color)
        plt.imshow(cv2.cvtColor(bordered_image, cv2.COLOR_BGR2RGB))
        plt.axis('off')
        plt.show()

import cv2
import os
import matplotlib.pyplot as plt
import numpy as np
from skimage import io


folder_path = '/content/drive/MyDrive/Varcity/era'
image_files = [f for f in os.listdir(folder_path) if f.endswith(('.jpg', '.jpeg', '.png', '.bmp'))]

for image_file in image_files:
    image_path = os.path.join(folder_path, image_file)
    image = cv2.imread(image_path)

    if image is not None:
        resized_image = cv2.resize(image, (400, 350))
        border_width = 5
        border_color = (255, 100, 0)
        bordered_image = cv2.copyMakeBorder(resized_image, border_width, border_width, border_width, border_width, cv2.BORDER_CONSTANT, value=border_color)
        gray = cv2.cvtColor(bordered_image, cv2.COLOR_BGR2GRAY)

        angle = 25
        scale = 1
        rotation_matrix = cv2.getRotationMatrix2D((gray.shape[1] / 2, gray.shape[0] / 2), angle, scale)
        transformed_image = cv2.warpAffine(gray, rotation_matrix, (gray.shape[1], gray.shape[0]))
        plt.subplot(1, 2, 1)
        plt.imshow(cv2.cvtColor(transformed_image, cv2.COLOR_BGR2RGB), cmap= 'gray')
        plt.title('Linear Transformation')
        plt.show()
        log_transformed_image = np.log1p(gray).astype(np.uint8)
        log_transformed_image = cv2.normalize(log_transformed_image, None, 0, 255, cv2.NORM_MINMAX)
        plt.figure(figsize=(10, 5))
        plt.subplot(1, 2, 2)
        plt.title('Log-Transformed Image')
        plt.imshow(cv2.cvtColor(log_transformed_image, cv2.COLOR_BGR2RGB), cmap='gray')
        plt.show()


        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        gamma_values = [0.4, 0.6, 1.2, 1.8]

        plt.figure(figsize=(15, 10))
        for i, gamma in enumerate(gamma_values):

            gamma_corrected_image = np.power(gray / 255.0, gamma)
            gamma_corrected_image = (gamma_corrected_image * 255).astype(np.uint8)
            plt.subplot(2, 2, i + 1)
            plt.title(f'Gamma = {gamma}')
            plt.imshow(cv2.cvtColor(gamma_corrected_image, cv2.COLOR_BGR2RGB), cmap='gray')
        plt.tight_layout()
        plt.show()