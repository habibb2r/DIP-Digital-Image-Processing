# -*- coding: utf-8 -*-
"""Final-DIP-Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10hak2DG2cDWNk15bIJQ1jxNd5_0m0NM8
"""

#Create a histogram for both color image and gryscale image

import numpy as np
import cv2
print("OpenCV-Python Version {}".format(cv2.__version__))
from skimage import io
import matplotlib.pyplot as plt


image = io.imread('https://media.wired.com/photos/593261cab8eb31692072f129/master/pass/85120553.jpg')
plt.imshow(image)
plt.show()

grayconvert_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
plt.imshow(grayconvert_image, cmap='gray')
plt.show()

# Plot histograms
plt.figure(figsize=(12, 4))

# Plot color image histogram
plt.subplot(1, 2, 1)
for i, color in enumerate(['r', 'g', 'b']):
    histogram = cv2.calcHist([image], [i], None, [256], [0, 256])
    plt.plot(histogram, color=color)
plt.title('Color Image Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')

# Plot grayscale image histogram
plt.subplot(1, 2, 2)
histogram = cv2.calcHist([grayconvert_image], [0], None, [256], [0, 256])
plt.plot(histogram, color='gray')
plt.title('Grayscale Image Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

#Create the equilised histogram from the histogram generated in task

import numpy as np
import cv2
from skimage import io
import matplotlib.pyplot as plt

image = io.imread('https://media.wired.com/photos/593261cab8eb31692072f129/master/pass/85120553.jpg')

# Convert the color image to grayscale
grayconvert_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)

# Calculate the grayscale histogram
histogram = cv2.calcHist([grayconvert_image], [0], None, [256], [0, 256])

# Calculate the PDF (Probability Density Function)
pdf = histogram / np.sum(histogram)

# Calculate the CDF (Cumulative Distribution Function)
cdf = np.cumsum(pdf)

# Perform histogram equalization using CDF
equalized_image = cv2.LUT(grayconvert_image, cdf)

bins = np.arange(256)
# # Plot the PDF and CDF histograms as bar charts
# plt.figure(figsize=(12, 8))

# Plot the original grayscale image
plt.figure(figsize=(12, 8))
plt.subplot(1, 3, 1)
plt.imshow(grayconvert_image, cmap='gray')
plt.title('Grayscale Image')

plt.figure(figsize=(12, 8))
# Plot the original grayscale image histogram
plt.subplot(1, 3, 2)
plt.plot(histogram, color='red')
plt.title('Original Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')

# Plot the equalized grayscale image
plt.figure(figsize=(12, 8))
plt.subplot(1, 3, 3)
plt.imshow(equalized_image, cmap='gray')
plt.title('Equalized Image')

plt.tight_layout()
plt.show()

# Plot the original and equalized histograms as bar charts
plt.figure(figsize=(12, 8))
# Plot the original histogram
plt.subplot(2, 1, 1)
plt.bar(range(256), histogram.flatten(), color='yellow', alpha=0.7, width=0.8)
plt.title('Original Histogram Bar')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')

# Plot the equalized histogram
plt.figure(figsize=(12, 8))
equalized_histogram = cv2.calcHist([equalized_image], [0], None, [256], [0, 256])
plt.plot(equalized_histogram, color='blue')
plt.title('Equalized Histogram')
plt.xlabel('Pixel Value')
plt.ylabel('Frequency')

# Plot the PDF and CDF histograms as bar charts
plt.figure(figsize=(12, 8))

# Plot the PDF histogram
plt.subplot(2, 1, 1)
plt.bar(bins, pdf.flatten(), color='red', alpha=0.7, width=0.8)
plt.title('PDF (Probability Density Function)')
plt.xlabel('Pixel Value')
plt.ylabel('Probability')

# Plot the CDF histogram
plt.subplot(2, 1, 2)
plt.bar(bins, cdf.flatten(), color='green', alpha=0.7, width=0.8)
plt.title('CDF (Cumulative Distribution Function)')
plt.xlabel('Pixel Value')
plt.ylabel('Cumulative Probability')

plt.tight_layout()
plt.show()

plt.show()

