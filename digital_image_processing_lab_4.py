# -*- coding: utf-8 -*-
"""Digital Image Processing Lab 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tzqStokOYwdi0tLM8V8lE1rN0IVSziVK
"""

#Take an image and apply the following transformation techniques :
# 1) Linear Transformation 2) Logarithmic Transformation 3)Power-Law Transformation (for gama = 0.4, 0.6, 1.2, 1.8)

import numpy as np
import cv2
from skimage import io
import matplotlib.pyplot as plt
image = io.imread('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSu2cZFMmiEJXL0pp4N6x9x-uaB3Wzu-ev8zMcE6TgMbu6aOiCt57rJu1nGq9XC93nPKV0')
plt.title('Normal Image')
plt.imshow(image)
plt.show()

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

angle = 25
scale = 1
rotation_matrix = cv2.getRotationMatrix2D((gray.shape[1] / 2, gray.shape[0] / 2), angle, scale)
transformed_image = cv2.warpAffine(gray, rotation_matrix, (gray.shape[1], gray.shape[0]))
plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(transformed_image, cv2.COLOR_BGR2RGB), cmap= 'gray')
plt.title('Linear Transformation')
plt.show()



log_transformed_image = np.log1p(gray).astype(np.uint8)

log_transformed_image = cv2.normalize(log_transformed_image, None, 0, 255, cv2.NORM_MINMAX)

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 2)
plt.title('Log-Transformed Image')
plt.imshow(cv2.cvtColor(log_transformed_image, cv2.COLOR_BGR2RGB), cmap='gray')
plt.show()


gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
gamma_values = [0.4, 0.6, 1.2, 1.8]

plt.figure(figsize=(15, 10))

for i, gamma in enumerate(gamma_values):

    gamma_corrected_image = np.power(gray / 255.0, gamma)
    gamma_corrected_image = (gamma_corrected_image * 255).astype(np.uint8)
    plt.subplot(2, 2, i + 1)
    plt.title(f'Gamma = {gamma}')
    plt.imshow(cv2.cvtColor(gamma_corrected_image, cv2.COLOR_BGR2RGB), cmap='gray')

plt.tight_layout()
plt.show()

import cv2
import os
import matplotlib.pyplot as plt
import numpy as np
from skimage import io


folder_path = '/content/drive/MyDrive/Resources /ML/dataset'

image_files = [f for f in os.listdir(folder_path) if f.endswith(('.jpg', '.jpeg', '.png', '.bmp'))]


for image_file in image_files:

    image_path = os.path.join(folder_path, image_file)


    image = cv2.imread(image_path)

    if image is not None:
        resized_image = cv2.resize(image, (400, 350))
        border_width = 5
        border_color = (255, 100, 0)
        bordered_image = cv2.copyMakeBorder(resized_image, border_width, border_width, border_width, border_width, cv2.BORDER_CONSTANT, value=border_color)
        gray = cv2.cvtColor(bordered_image, cv2.COLOR_BGR2GRAY)
        # plt.imshow(gray, cmap='gray')
        # plt.show()

        angle = 25
        scale = 1
        rotation_matrix = cv2.getRotationMatrix2D((gray.shape[1] / 2, gray.shape[0] / 2), angle, scale)
        transformed_image = cv2.warpAffine(gray, rotation_matrix, (gray.shape[1], gray.shape[0]))
        plt.subplot(1, 2, 1)
        plt.imshow(cv2.cvtColor(transformed_image, cv2.COLOR_BGR2RGB), cmap= 'gray')
        plt.title('Linear Transformation')
        plt.show()
        log_transformed_image = np.log1p(gray).astype(np.uint8)

        log_transformed_image = cv2.normalize(log_transformed_image, None, 0, 255, cv2.NORM_MINMAX)

        plt.figure(figsize=(10, 5))
        plt.subplot(1, 2, 2)
        plt.title('Log-Transformed Image')
        plt.imshow(cv2.cvtColor(log_transformed_image, cv2.COLOR_BGR2RGB), cmap='gray')
        plt.show()


        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        gamma_values = [0.4, 0.6, 1.2, 1.8]

        plt.figure(figsize=(15, 10))

        for i, gamma in enumerate(gamma_values):

            gamma_corrected_image = np.power(gray / 255.0, gamma)
            gamma_corrected_image = (gamma_corrected_image * 255).astype(np.uint8)
            plt.subplot(2, 2, i + 1)
            plt.title(f'Gamma = {gamma}')
            plt.imshow(cv2.cvtColor(gamma_corrected_image, cv2.COLOR_BGR2RGB), cmap='gray')

        plt.tight_layout()
        plt.show()