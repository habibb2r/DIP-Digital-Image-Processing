# -*- coding: utf-8 -*-
"""DIPLAB-FInal3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dr6HVTkH9bYYULPSoIPv5MC6rZzOY_Z0
"""

#Remove salt-pepper noise from an image using median filtering

import numpy as np
import cv2
import matplotlib.pyplot as plt
from skimage import io

# Load the image from a URL (replace with your image URL)
image_url = 'https://www.fit.vutbr.cz/~vasicek/imagedb/img_corrupted/impnoise_005/108073.png'
image = io.imread(image_url)

# # Display the original image
# plt.imshow(image, cmap='gray')  # Display in grayscale if it's already a single-channel image
# plt.title('Original Image')
# plt.show()

# Check if the image is already grayscale
if len(image.shape) == 3 and image.shape[2] == 3:
    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
else:
    gray_image = image

# Add salt-and-pepper noise to the image
noise = 0.02  # Adjust the noise level as needed
salt_pepper_noise = np.random.choice([0, 1], size=gray_image.shape, p=[1 - noise, noise])
salt_pepper_noise[salt_pepper_noise == 1] = 255
salt_pepper_noise = salt_pepper_noise.astype(np.uint8)
noisy_image = cv2.add(gray_image, salt_pepper_noise)

# Apply median filtering to remove noise
filtered_image = cv2.medianBlur(noisy_image, 5)  # You can adjust the kernel size as needed


plt.figure(figsize=(20, 15))

plt.subplot(1, 3, 1)
plt.imshow(gray_image, cmap='gray')
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(noisy_image, cmap='gray')
plt.title('Noisy Image')

plt.subplot(1, 3, 3)
plt.imshow(filtered_image, cmap='gray')
plt.title('Filtered Image')

plt.show()